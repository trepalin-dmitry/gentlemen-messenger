/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.yandex.messenger.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import ru.yandex.messenger.model.*;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-10-03T12:56:10.625Z[GMT]")
@Validated
public interface V1Api {

    @Operation(summary = "", description = "получить список сообщений из чата chat_id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "action was completed successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "* `bad-parameters` - неправильный формат входных параметров "),
        
        @ApiResponse(responseCode = "404", description = "* `chat-not-found` - указанный чат не существует "),
        
        @ApiResponse(responseCode = "200", description = "unexpected server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponseDefault.class))) })
    @RequestMapping(value = "/v1/chats/{chat_id}/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> v1ChatsChatIdMessagesGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId, @NotNull @Min(1) @Max(1000) @Parameter(in = ParameterIn.QUERY, description = "не больше стольки сообщений хотим получить в ответе" ,required=true,schema=@Schema(allowableValues={  }, minimum="1", maximum="1000"
)) @Valid @RequestParam(value = "limit", required = true) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "указатель для сервера, обозначающий место, с которого стоит продолжить получение сообщений; если не указан, то сервер должен вернуть limit сообщений, начиная с самого первого сообщения в чате" ,schema=@Schema()) @Valid @RequestParam(value = "from", required = false) Cursor from);


    @Operation(summary = "", description = "отправить в чат chat_id сообщение message", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "action was completed successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2012.class))),
        
        @ApiResponse(responseCode = "400", description = "* `bad-parameters` - неправильный формат входных параметров "),
        
        @ApiResponse(responseCode = "404", description = "* `chat-not-found` - указанный чат не существует * `user-not-found` - в указанном чате нет указанного пользователя "),
        
        @ApiResponse(responseCode = "200", description = "unexpected server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponseDefault.class))) })
    @RequestMapping(value = "/v1/chats/{chat_id}/messages",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2012> v1ChatsChatIdMessagesPost(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = true) String userId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ChatIdMessagesBody body);


    @Operation(summary = "", description = "добавить пользователя user_name в чат chat_id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "action was completed successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2011.class))),
        
        @ApiResponse(responseCode = "400", description = "* `bad-parameters` - неправильный формат входных параметров "),
        
        @ApiResponse(responseCode = "404", description = "* `chat-not-found` - указанный чат не существует "),
        
        @ApiResponse(responseCode = "200", description = "unexpected server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponseDefault.class))) })
    @RequestMapping(value = "/v1/chats/{chat_id}/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2011> v1ChatsChatIdUsersPost(@Parameter(in = ParameterIn.PATH, description = "id чата, полученное при создании чата", required=true, schema=@Schema()) @PathVariable("chat_id") String chatId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ChatIdUsersBody body);


    @Operation(summary = "", description = "создать чат с именем chat_name", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "action was completed successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "400", description = "* `bad-parameters` - неправильный формат входных параметров "),
        
        @ApiResponse(responseCode = "200", description = "unexpected server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponseDefault.class))) })
    @RequestMapping(value = "/v1/chats",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> v1ChatsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody V1ChatsBody body);

}

